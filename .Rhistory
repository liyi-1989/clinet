library(QRM)
rGumbelSim <- rGumbel(1000,0,1)
plot(rGumbelSim)
rGumbelSim <- rGumbel(1000,0,1)
plot(density(rGumbelSim))
source('utils_cov.R')
N=1000
res2=rep(0,N)
for(k in 1:N){
data = mvrnorm(n, mu = rep(0,p), Sigma = S)
Shat=cov(data)
# for(i in 1:p){
#   Shat[i,i]=0
# }
# for(i in 1:(p-1)){
#   Shat[i,i+1]=Shat[i+1,i]=0
# }
# for(i in 1:(p-2)){
#   Shat[i,i+2]=Shat[i+2,i]=0
# }
res2[k]=max(abs(Shat*(S==0)))
}
plot(density(res2),col="blue",main="dis of max of zeros in many sample cov")
x=seq(min(res2),max(res2),length=100)
y=dnorm(x,mean=mean(res2), sd=sd(res2))
lines(x,y, type="l", lwd=1,col="red")
abline(v=mean(res2),lty=2,col="orange")
legend("topright",c("dis. of max of zeros","its normal appr."),lty=c(1,1),col=c("blue","red"))
plot(density(res2),col="blue",main="dis of max of zeros in many sample cov")
x=seq(min(res2),max(res2),length=100)
y=dnorm(x,mean=mean(res2), sd=sd(res2))
lines(x,y, type="l", lwd=1,col="red")
abline(v=mean(res2),lty=2,col="orange")
legend("topright",c("dis. of max of zeros","its normal appr."),lty=c(1,1),col=c("blue","red"))
y2=dGumbel(x, mu = mean(res), sigma = sd(res)*sqrt(6)/pi, log = FALSE)
lines(x,y2, type="l", lwd=1,col="pink")
plot(density(res2),lty=2,col="blue",main="dis of max of zeros in many sample cov")
x=seq(min(res2),max(res2),length=100)
y=dnorm(x,mean=mean(res2), sd=sd(res2))
lines(x,y, type="l", lwd=1,col="red")
abline(v=mean(res2),lty=2,col="orange")
legend("topright",c("dis. of max of zeros","its normal appr."),lty=c(2,1),col=c("blue","red"))
y2=dGumbel(x, mu = mean(res), sigma = sd(res)*sqrt(6)/pi, log = FALSE)
lines(x,y2, type="l", lwd=1,col="pink")
plot(density(res2),lty=2,col="blue",main="dis of max of zeros in many sample cov")
x=seq(min(res2),max(res2),length=100)
y=dnorm(x,mean=mean(res2), sd=sd(res2))
lines(x,y, type="l", lwd=1,col="red")
abline(v=mean(res2),lty=2,col="orange")
legend("topright",c("dis. of max of zeros","its normal appr."),lty=c(2,1),col=c("blue","red"))
y2=dGumbel(x, mu = mean(res)-0.5772*sd(res)*sqrt(6)/pi, sigma = sd(res)*sqrt(6)/pi, log = FALSE)
lines(x,y2, type="l", lwd=1,col="pink")
x
plot(density(res2),lty=2,col="blue",main="dis of max of zeros in many sample cov")
x=seq(min(res2),max(res2),length=100)
y=dnorm(x,mean=mean(res2), sd=sd(res2))
lines(x,y, type="l", lwd=1,col="red")
abline(v=mean(res2),lty=2,col="orange")
legend("topright",c("dis. of max of zeros","its normal appr."),lty=c(2,1),col=c("blue","red"))
y2=dGumbel(x, mu = mean(res2)-0.5772*sd(res2)*sqrt(6)/pi, sigma = sd(res2)*sqrt(6)/pi, log = FALSE)
lines(x,y2, type="l", lwd=1,col="pink")
source('utils_cov.R')
# True model (WITH teleconnection)
p=100; n=1000; r=0.9; s=0.5; tele=-1; sigma=1
Ip=diag(rep(1,p))
V=genV(p=p,r=r,s=s,tele=tele)
S=V%*%t(V)+diag(rep(1,p))
M=(S==0)
n=1000
data = mvrnorm(n, mu = rep(0,p), Sigma = S)
Shat=cov(data)
# take zero elements in true cov
res=NULL
for(i in 1:p){
for(j in 1:p){
if(M[i,j] & (i-j>2)){
res=c(res,Shat[i,j])
}
}
}
# result: dis. of zeros like normal
plotDen(res)
source('utils_cov.R')
p=100; n=1000; r=0.9; s=0.5; tele=T; sigma=1
maxnoise(p,type=0, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
source('D:/works/clinet/utils_cov.R')
maxnoise(p,type=0, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
tele=F
maxnoise(p,type=0, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
p=100; n=1000; r=0.9; s=0.5; tele=T; sigma=1
maxnoise(p,type=0, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
maxnoise(p,type=0, n=1000, N=200,r=r,s=s,tele=tele, sigma=sigma)
source('D:/works/clinet/utils_cov.R')
maxnoise(p,type=0, n=1000, N=200,r=r,s=s,tele=tele, sigma=sigma)
source('D:/works/clinet/utils_cov.R')
maxnoise(p,type=0, n=1000, N=200,r=r,s=s,tele=tele, sigma=sigma)
source('D:/works/clinet/utils_cov.R')
maxnoise(p,type=0, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
source('D:/works/clinet/utils_cov.R')
maxnoise(p,type=0, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
tele
maxnoise(p,type=0, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
maxnoise(p,type=4, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)
n=1000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
N
n=1000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
n=1000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
n=1000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
n=1000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
rnorm(5)
n=1000
N=10000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
n=1000
N=10000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
n=10000
N=10000
for(i in 1:N){
res[i]=max(rnorm(n))
}
plotDen(res)
fgev
library("evd", lib.loc="D:/Program Files/R/R-3.3.2/library")
?fgev
fgev(res)
mean(res)
mean(res)-0.5772*sd(res)*sqrt(6)/pi
sd(res)*sqrt(6)/pi
plot(fgev(res))
fgev(res,shape=0)
mean(res)-0.5772*sd(res)*sqrt(6)/pi
sd(res)*sqrt(6)/pi
str(fgev(res,shape=0))
fgev(res,shape=0)$estimate
fgev(res,shape=0)$estimate$loc
class(fgev(res,shape=0)$estimate)
fgev(res,shape=0)$estimate["loc"]
fgev(res,shape=0)$estimate["scale"]
? dGumbel
install.packages("rSymPy")
'hi'
r
f3
library(rSymPy)
r = Var('r')
s = Var('s')
r=0
s=1
f3 = Var('f3')
f4 = Var('f4')
f5 = Var('f5')
f6 = Var('f6')
f7 = Var('f7')
f88 = Var('f88')
f89 = Var('f89')
f90 = Var('f90')
f91 = Var('f91')
f92 = Var('f92')
rGumbelSim <- rGumbel(1000,mu=0,sigma=1)
plot(density(rGumbelSim))
library(evd) #fgev(...)$estimate to fit model parameters
library(QRM) # xGumbel like function
rGumbelSim <- rGumbel(1000,mu=0,sigma=1)
plot(density(rGumbelSim))
fgev(rGumbelSim,shape=0)$estimate
fgev(rGumbelSim)$estimate
?tools::texi2pdf
setwd("D:/Dropbox/papers/RJ")
tools::texi2pdf("RJwrapper.tex")
tools::texi2pdf("RJwrapper.tex")
g <- barabasi.game(1000, power=1)
layout <- layout.fruchterman.reingold(g)
plot(g, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
library(igraph)
g <- barabasi.game(1000, power=1)
layout <- layout.fruchterman.reingold(g)
plot(g, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
library(igraph)
g <- barabasi.game(1000, power=1)
layout <- layout.fruchterman.reingold(g)
plot(g, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
betweenness(g)
B=betweenness(g)
plot(density(B))
EB=edge.betweenness(g)
plot(density(EB))
plot(density(EB))
source("http://michael.hahsler.net/SMU/ScientificCompR/code/map.R")
plot(g, layout=layout,
vertex.size=map(betweenness(g),c(1,15)),
edge.width=map(edge.betweenness(g), c(1,10)))
plot(g, layout=layout,
vertex.size=map(betweenness(g),c(1,15)),
edge.width=map(edge.betweenness(g), c(1,10)),vertex.label=NA,)
eb <- edge.betweenness.community(g)
member <- community.to.membership(g, eb$merges,
step=nrow(eb$merges)-10L+1L)
plot(g,
vertex.color= rainbow(10, .8, .8, alpha=.8)[member$membership+1L],
vertex.size=5, layout=layout,  vertex.label=NA,
edge.arrow.size=.2)
?communities
member=membership(eb)
plot(g,
vertex.color= rainbow(10, .8, .8, alpha=.8)[member$membership+1L],
vertex.size=5, layout=layout,  vertex.label=NA,
edge.arrow.size=.2)
member
plot(g,
vertex.color= rainbow(10, .8, .8, alpha=.8)[member+1L],
vertex.size=5, layout=layout,  vertex.label=NA,
edge.arrow.size=.2)
ec <- evcent(g)$vector
plot(g, layout=layout, vertex.size=map(ec, c(1,20)), vertex.label=NA, edge.arrow.size=.2)
g <- barabasi.game(1000, power=1)
layout <- layout.fruchterman.reingold(g)
plot(g, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
B=betweenness(g)
EB=edge.betweenness(g)
plot(density(EB))
plot(g, layout=layout,
vertex.size=map(betweenness(g),c(1,15)),
edge.width=map(edge.betweenness(g), c(1,10)),vertex.label=NA,)
eb <- edge.betweenness.community(g)
#member <- community.to.membership(g, eb$merges, step=nrow(eb$merges)-10L+1L)
member=membership(eb)
plot(g,
vertex.color= rainbow(10, .8, .8, alpha=.8)[member+1L],
vertex.size=5, layout=layout,  vertex.label=NA,
edge.arrow.size=.2)
ec <- evcent(g)$vector
plot(g, layout=layout, vertex.size=map(ec, c(1,20)), vertex.label=NA, edge.arrow.size=.2)
plot(g,
vertex.color= rainbow(10, .8, .8, alpha=.8)[member+2],
vertex.size=5, layout=layout,  vertex.label=NA,
edge.arrow.size=.2)
degree(g)
g <- barabasi.game(1000, power=1)
layout <- layout.fruchterman.reingold(g)
layout <- layout.sphere(g)
plot(g, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
g <- barabasi.game(1000, power=1)
layout <- layout.fruchterman.reingold(g)
layout <- layout.sphere(g)
layout <- layout.circle(g)
plot(g, layout=layout, vertex.size=2,
vertex.label=NA, edge.arrow.size=.2)
degree(g)
B=betweenness(g)
EB=edge.betweenness(g)
plot(density(EB))
plot(g, layout=layout,
vertex.size=map(betweenness(g),c(1,15)),
edge.width=map(edge.betweenness(g), c(1,10)),vertex.label=NA,)
eb <- edge.betweenness.community(g)
#member <- community.to.membership(g, eb$merges, step=nrow(eb$merges)-10L+1L)
member=membership(eb)
plot(g,
vertex.color= rainbow(10, .8, .8, alpha=.8)[member+2],
vertex.size=5, layout=layout,  vertex.label=NA,
edge.arrow.size=.2)
ec <- evcent(g)$vector
plot(g, layout=layout, vertex.size=map(ec, c(1,20)), vertex.label=NA, edge.arrow.size=.2)
layout <- layout.sphere(g)
plot(g,
vertex.color= rainbow(10, .8, .8, alpha=.8)[member+2],
vertex.size=5, layout=layout,  vertex.label=NA,
edge.arrow.size=.2)
g
828/12
830/12
library(rhdf5)
library(rhdf5)
fileloc="./data/air_mon_mean.nc"
h5ls(fileloc)
LON=h5read(fileloc,"lon")
LAT=h5read(fileloc,"lat")
X=h5read(fileloc,"air") # lon*lat*time unit degC
NLON=length(LON)
NLAT=length(LAT)
NLON
NLON/2
LON=h5read(fileloc,"lon")
LAT=h5read(fileloc,"lat")
X=h5read(fileloc,"air") # lon*lat*time unit degC
NLON=length(LON)
NLAT=length(LAT)
LAT=rev(LAT)
LON=c(LON[(NLON/2+1):NLON]-360,LON[1:(NLON/2)])
X=X[, length(LAT):1, ]
X=X[c((NLON/2+1):NLON,1:(NLON/2)),,]
X=X[,,1:(dim(X)[3]-2)] # 1948-2016
# remove monthly mean
X_mon_mean=X[,,1:12]
for(i in 0:11){
X0=X[,,(1:dim(X)[3])%%12==i]
X_mon_mean[,,i+1]=apply(X0,c(1,2),mean) # [12,1,2,3,...,11]
}
for(i in 1:dim(X)[3]){
X[,,i]=X[,,i]-X_mon_mean[,,(i%%12)+1]
}
dim(X)
LON
LAT
2*(1:(73/2))-1
2*(1:(144/2))-1
idsellon=2*(1:(NLON/2))-1
idsellat=2*(1:(NLAT/2))-1
idsellon
idsellat
length(idsellat)
length(idsellon)
dim(X)
library(rhdf5)
fileloc="./data/air_mon_mean.nc"
h5ls(fileloc)
# group name       otype dclass            dim
# 0     /  air H5I_DATASET  FLOAT 144 x 73 x 830
# 1     /  lat H5I_DATASET  FLOAT             73
# 2     /  lon H5I_DATASET  FLOAT            144
# 3     / time H5I_DATASET  FLOAT            830
LON=h5read(fileloc,"lon")
LAT=h5read(fileloc,"lat")
X=h5read(fileloc,"air") # lon*lat*time unit degC
NLON=length(LON)
NLAT=length(LAT)
LAT=rev(LAT)
LON=c(LON[(NLON/2+1):NLON]-360,LON[1:(NLON/2)])
X=X[, length(LAT):1, ]
X=X[c((NLON/2+1):NLON,1:(NLON/2)),,]
X=X[,,1:(dim(X)[3]-2)] # 1948-2016
# remove monthly mean
X_mon_mean=X[,,1:12]
for(i in 0:11){
X0=X[,,(1:dim(X)[3])%%12==i]
X_mon_mean[,,i+1]=apply(X0,c(1,2),mean) # [12,1,2,3,...,11]
}
for(i in 1:dim(X)[3]){
X[,,i]=X[,,i]-X_mon_mean[,,(i%%12)+1]
}
############### 1.1 Get subsample ################
idsellon=2*(1:(NLON/2))-1
idsellat=2*(1:(NLAT/2))-1
LON=LON[idsellon]
LAT=LAT[idsellat]
NLON=length(LON)
NLAT=length(LAT)
X=X[idsellon,idsellat,]
save(LON,LAT,NLON,NLAT,X,file="air_mon_mean_mon_mean_removed_sub.RData")
save(LON,LAT,NLON,NLAT,X,file="./data/air_mon_mean_mon_mean_removed_sub.RData")
load("./data/air_mon_mean_mon_mean_removed_sub.RData")
dfv=NULL
count=0
for(i in 1:NLON){
for(j in 1:NLAT){
count=count+1
dfv=rbind(dfv,c(count,i,j,LON[i],LAT[j]))
}
}
df
dfv
colnames(dfv)=c("vertex","idlon","idlat","lon","lat")
p=dim(dfv)[1]
X1=NULL # Long Data (2D)
for(i in 1:NLON){
for(j in 1:NLAT){
X1=cbind(X1,X[i,j,])
}
}
dim(X1)
36*72
S1=cor(X1)
dim(S1)
rcd
library(rcd)
library("devtools", lib.loc="D:/Program Files/R/R-3.3.2/library")
install_github("liyi-1989/rcd")
install_github("liyi-1989/rcd")
install_github("liyi-1989/rcd")
find_rtools(T)
Sys.getenv()['PATH']
install.packages("devtools")
library("devtools", lib.loc="D:/Program Files/R/R-3.4.0/library")
install.packages("Rcpp")
install.packages("RcppParallel")
library("devtools", lib.loc="D:/Program Files/R/R-3.4.0/library")
install_github("liyi-1989/rcd")
find_rtools(T)
install.Rtools()
install.packages("installr")
install.Rtools()
Sys.getenv()
library("devtools", lib.loc="D:/Program Files/R/R-3.4.0/library")
find_rtools(T)
install_github("liyi-1989/rcd")
install.packages("rmarkdown")
install_github("liyi-1989/rcd")
library(Rcpp)
source('D:/works/clinet/rcdkde.R')
library(Rcpp)
sourceCpp("ccorkde.cpp")
Rcpp::sourceCpp('ccorkde.cpp')
sourceCpp("ccorkde.cpp")
library(Rcpp)
sourceCpp("ccorkde.cpp")
Sys.getenv()
library(Rcpp)
sourceCpp("ccorkde.cpp")
library("devtools", lib.loc="D:/Program Files/R/R-3.4.0/library")
install_github("liyi-1989/rcd")
sourceCpp("ccorkde.cpp")
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
library(Rcpp)
sourceCpp("ccorkde.cpp")
library("devtools", lib.loc="D:/Program Files/R/R-3.4.0/library")
find_rtools(T)
find_rtools()
find_rtools(debug = T)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
library(Rcpp)
sourceCpp("ccorkde.cpp")
sourceCpp
install.packages("devtools")
library("devtools", lib.loc="D:/ProgramFiles/R/R-3.4.0/library")
install.packages("Rcpp")
install.packages("RcppParallel")
library(Rcpp)
cppFunction('int add(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
library("devtools", lib.loc="D:/ProgramFiles/R/R-3.4.0/library")
install_github("liyi-1989/rcd")
library(rcd)
rcd
load("./data/air_mon_mean_mon_mean_removed_sub.RData")
dfv=NULL
count=0
for(i in 1:NLON){
for(j in 1:NLAT){
count=count+1
dfv=rbind(dfv,c(count,i,j,LON[i],LAT[j]))
}
}
colnames(dfv)=c("vertex","idlon","idlat","lon","lat")
p=dim(dfv)[1]
X1=NULL # Long Data (2D)
for(i in 1:NLON){
for(j in 1:NLAT){
X1=cbind(X1,X[i,j,])
}
} # X1 is the final data matrix to work on. Vertex data frame is in dfv. Edge data frame need analysis with correlation
p
?rcd
rcd
S2=S1
############ 2. Correlation Matrix ##############
library(rcd)
S1=cor(X1)
S2=S1
for(i in 1:p){
for(j in 1:p){
S2[i,j]=S2[j,i]=rcd(X1[,i],X1[,j],method="kde")
}
}
for(i in 1:p){
print(i)
for(j in i:p){
S2[i,j]=S2[j,i]=rcd(X1[,i],X1[,j],method="kde")
}
}
save(S1,S2,file="cor_rcd_matrix.RData")
setwd("D:/Dropbox/papers/icml2017spcov/doc")
