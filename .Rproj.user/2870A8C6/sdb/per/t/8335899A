{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Covariance Model for Teleconnection\"\noutput: pdf_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n```{r}\nsource('../utils_cov.R')\n```\n\n# 1. NO teleconnection case \n\n```{r}\n# True model (NO teleconnection)\np=100; r=0.5\nV=genV(p=p,r=0.5,tele=F) # only neighbour effect\nS=V%*%t(V)+diag(rep(1,p)) # true cov, generated from factor model S=VV'+I\nprintM(V)\nprintM(S)\n```\n\n\n## 1.0 sampling dis. of cov of two (univariate) ind. normal \n\nGiven X, and Y are two independent normal (sample data with sample size 10^N2), what is the distribution of cov(X,Y)? (of course, the true value cov(X,Y)=0). This part simply repeat it N times, and find the sampling distribution of cov(X,Y). This is a preparation of the zero(true value) elements in the sample covariance matrix. \n \n```{r}\nN=1000 # repeat size\nN2=5 # sample size: 10 to the power\nres=rep(0,N) # each iteration, save the covariance. all repeatants forms a sample\nres2=rep(0,N2) # each sample size, save sd\n\nfor(j in 1:N2){\n  n=10^j # sample size \n  for(i in 1:N){\n    x=rnorm(n)\n    y=rnorm(n)\n    res[i]=cov(x,y)\n  }\n  res2[j]=sd(res) # standard error of the \"sample covariance\"\n}\n\n# sample size vs sd (of sampling dis.) and 1/sqrt(n)\nplot(1:N2,log(res2),main=\"sd of sampling dis. of cov(true value = 0)\", \n     xlab=\"log(sample size)\",ylab=\"log(standard error)\")\nlines(1:N2,log(1/sqrt(10^(1:N2))),type=\"l\",col=\"red\")\nlegend(\"topright\",c(\"log(sd)\",\"log(1/sqrt(n))\"),lty=c(1,1),pch = c(1,NA),col=c(\"black\",\"red\"))\n\n# sampling distribution vs its normal version(same mean & sd)\nplot(density(res),main=\"sampling dis. of cov ind. two normal\")\nx=seq(min(res),max(res),length=100)\ny=dnorm(x,mean=mean(res), sd=sd(res))\nlines(x,y, type=\"l\", lwd=1,col=\"red\")\nlegend(\"topright\",c(\"sampling dis.\",\"its normal appr.\"),lty=c(1,1),col=c(\"black\",\"red\"))\n```\n\n\n## 1.1 dis of zero/non-0s in sample cov \n\n```{r}\n# (for one fixed sample cov) zero elements(off-diagonals) are the sample data\nn=1000\ndata = mvrnorm(n, mu = rep(0,p), Sigma = S)\nShat=cov(data)\n\nres=NULL\nfor(i in 1:p){\n  for(j in 1:p){\n    if((i-j)>2){\n      res=c(res,Shat[i,j])\n    }\n  }\n}\n\n# sampling distribution vs its normal version(same mean & sd)\nplot(density(res),col=\"blue\",main=\"dis of zeros(true value) in sample cov\")\nx=seq(min(res),max(res),length=100)\ny=dnorm(x,mean=mean(res), sd=sd(res))\nlines(x,y, type=\"l\", lwd=1,col=\"red\")\nlegend(\"topright\",c(\"dis. of zeros\",\"its normal appr.\"),lty=c(1,1),col=c(\"black\",\"red\"))\n```\n\n\n## 1.2 dis of max zero/non-0 in many sample cov \n\n```{r}\n\nN=1000\nres2=rep(0,N)\nfor(k in 1:N){\n  data = mvrnorm(n, mu = rep(0,p), Sigma = S)\n  Shat=cov(data)\n  # for(i in 1:p){\n  #   Shat[i,i]=0\n  # }\n  # for(i in 1:(p-1)){\n  #   Shat[i,i+1]=Shat[i+1,i]=0\n  # }\n  # for(i in 1:(p-2)){\n  #   Shat[i,i+2]=Shat[i+2,i]=0\n  # }\n  res2[k]=max(abs(Shat*(S==0)))\n}\n\nplot(density(res2),col=\"blue\",main=\"dis of max of zeros in many sample cov\")\nx=seq(min(res2),max(res2),length=100)\ny=dnorm(x,mean=mean(res2), sd=sd(res2))\nlines(x,y, type=\"l\", lwd=1,col=\"red\")\nabline(v=mean(res2),lty=2,col=\"orange\")\nlegend(\"topright\",c(\"dis. of max of zeros\",\"its normal appr.\"),lty=c(1,1),col=c(\"blue\",\"red\"))\n\nsummary(res2)\nquantile(res2,0.99)\n```\n\n\n# 2. WITH teleconnection case \n\n```{r}\n# True model (WITH teleconnection)\np=100; n=1000; r=0.9; s=0.5; tele=1; sigma=1\nIp=diag(rep(1,p))\nV=genV(p=p,r=r,s=s,tele=tele)\nS=V%*%t(V)+diag(rep(1,p))\nM=(S==0)\nprintM(S)\n```\n\n\n## 2.1 one sample cov, distr of zero elements \n\n```{r}\nn=1000\ndata = mvrnorm(n, mu = rep(0,p), Sigma = S)\nShat=cov(data)\n# take zero elements in true cov\nres=NULL\n\nfor(i in 1:p){\n  for(j in 1:p){\n    if(M[i,j] & (i-j>2)){\n      res=c(res,Shat[i,j])\n    }\n  }\n}\n\n# result: dis. of zeros like normal\nplotDen(res) \n```\n\n\n## 2.2 multi sample cov, distr of max elements \n\ncompare the distribution  of:\n\n- max of zeros in true cov (Well, I exclude the margin 2<|i-j|<5, this part maybe large in the 3 by 3 block version)\n- max of teleconnection signal (max off-diagonal non-zero center)\n\ntype: 0: sample cov; 1: spectual norm; 2: Frobenius norm; 3: mean; 4: abs(mean); 5: prod; 6: 2nd largest; 8: abs(prod(m0)); 10: sd; 11: skewness; 12: kurtosis;\n\nr: rho; s: scale of the teleconnection s*(rho,1,rho); \n\n```{r}\n# rho=1\np=100; n=1000; r=0.9; s=0.4; tele=1; sigma=1\n\npar(mfrow=c(2,3))\nfor(i in c(0,1,2,3,4,10)){\n  maxnoise(p,type=i, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)\n}\n```\n\n```{r}\n# rho=-1\np=100; n=1000; r=0.9; s=0.4; tele=-1; sigma=1\n\npar(mfrow=c(2,3))\nfor(i in c(0,1,2,3,4,10)){\n  maxnoise(p,type=i, n=1000, N=100,r=r,s=s,tele=tele, sigma=sigma)\n}\n```\n\n\n## 2.3 covariance estimation \n\n\n```{r}\n# rho=1\np=100; n=1000; r=0.9; s=0.4; tele=1; sigma=1\nIp=diag(rep(1,p))\nV=genV(p=p,r=r,s=s,tele=tele)\nS=V%*%t(V)+diag(rep(1,p))\n\n# Step I: Generate data \n# method 1: generate data directly with sigma\ndata = mvrnorm(n, mu = rep(0,p), Sigma = S)\n# method 2: generate according to factor model\nV=genV(p=p,r=r,s=s,tele=tele)\nf=mvrnorm(n, mu = rep(0,p), Sigma = Ip)\nE=mvrnorm(n, mu = rep(0,p), Sigma = Ip)\ndata = V%*%t(f)+sigma*t(E) #mvrnorm(n, mu = rep(0,p), Sigma = S)\ndata=t(data)\n\n# Step II: Calculate Different Covariance Estimator\n# NOTE:  each one has a threshould to tune based on different model\n\n# TYPE 1: sample covariance\nShat=cov(data) \n# TYPE 2: (universal) threshoulding sample covariance\nST=Shat*(abs(Shat)>0.38) \n# note: large sample size n=1e5, thre=0.1, frob_thre=0.2, could find all, better than threshoulding (not not very interesting)\n# TYPE 3: use (3 by 3 block) variance threshoulding\nSnorm=MnormM(Shat,h=2,type=4,RM=F)\nB1=(Snorm>0.38)\nB2=matrix(0,p,p)\nfor(i in 1:p){\n  for(j in 1:p){\n    if(abs(i-j)<=10){\n      B1[i,j]=0\n    }\n    if(abs(i-j)<=2){\n      B2[i,j]=1\n    }\n  }\n}\n# SB=Shat*(B1 | B2) # B1: teleconnection; B2: banding, cut nearest-neighbours (too good)\nSB=Shat*(Snorm>0.26)\n# TYPE 4: Tony Cai's Adaptive threshould\nSAT=MnormMvar(data) # Calculate variance of covariance elements\nSA=regAT(Shat,sqrt(SAT),n,const=1.47)\n\nprintM(Shat)\nprintM(ST)\nprintM(SB)\nprintM(SA)\nprintM(S)\nbase::norm(S-Shat,\"F\")\nbase::norm(S-ST,\"F\")\nbase::norm(S-SB,\"F\")\nbase::norm(S-SA,\"F\")\n\nround(S[4:8,89:93],2)\nround(Shat[4:8,89:93],2)\nround(Snorm[4:8,89:93],2)\n```\n\n\n```{r}\n# rho=-1\np=100; n=1000; r=0.9; s=0.4; tele=-1; sigma=1\nIp=diag(rep(1,p))\nV=genV(p=p,r=r,s=s,tele=tele)\nS=V%*%t(V)+diag(rep(1,p))\n\n# Step I: Generate data \n# method 1: generate data directly with sigma\ndata = mvrnorm(n, mu = rep(0,p), Sigma = S)\n# method 2: generate according to factor model\nV=genV(p=p,r=r,s=s,tele=tele)\nf=mvrnorm(n, mu = rep(0,p), Sigma = Ip)\nE=mvrnorm(n, mu = rep(0,p), Sigma = Ip)\ndata = V%*%t(f)+sigma*t(E) #mvrnorm(n, mu = rep(0,p), Sigma = S)\ndata=t(data)\n\n# Step II: Calculate Different Covariance Estimator\n# NOTE:  each one has a threshould to tune based on different model\n\n# TYPE 1: sample covariance\nShat=cov(data) \n# TYPE 2: (universal) threshoulding sample covariance\nST=Shat*(abs(Shat)>0.38) \n# note: large sample size n=1e5, thre=0.1, frob_thre=0.2, could find all, better than threshoulding (not not very interesting)\n# TYPE 3: use (3 by 3 block) variance threshoulding\nSnorm=MnormM(Shat,h=2,type=4,RM=T)\nB1=(Snorm>0.35)\nB2=matrix(0,p,p)\nfor(i in 1:p){\n  for(j in 1:p){\n    if(abs(i-j)<=10){\n      B1[i,j]=0\n    }\n    if(abs(i-j)<=2){\n      B2[i,j]=1\n    }\n  }\n}\n# SB=Shat*(B1 | B2) # B1: teleconnection; B2: banding, cut nearest-neighbours (too good)\nSB=Shat*(Snorm>0.26)\n# TYPE 4: Tony Cai's Adaptive threshould\nSAT=MnormMvar(data) # Calculate variance of covariance elements\nSA=regAT(Shat,sqrt(SAT),n,const=1.47)\n\nprintM(Shat)\nprintM(ST)\nprintM(SB)\nprintM(SA)\nprintM(S)\nbase::norm(S-Shat,\"F\")\nbase::norm(S-ST,\"F\")\nbase::norm(S-SB,\"F\")\nbase::norm(S-SA,\"F\")\n\nround(S[4:8,89:93],2)\nround(Shat[4:8,89:93],2)\nround(Snorm[4:8,89:93],2)\n```\n\n\n\n\n",
    "created" : 1493215068234.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3964016679",
    "id" : "8335899A",
    "lastKnownWriteTime" : 1493220548,
    "last_content_update" : 1493220601185,
    "path" : "D:/works/clinet/doc/model2.Rmd",
    "project_path" : "doc/model2.Rmd",
    "properties" : {
        "docOutlineVisible" : "0",
        "last_setup_crc32" : "BD77B9DCbb338d19",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}