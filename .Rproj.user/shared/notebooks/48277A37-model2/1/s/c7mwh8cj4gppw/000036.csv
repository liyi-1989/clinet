"0","# rho=1"
"0","p=100; n=1000; r=0.9; s=0.4; tele=1; sigma=1"
"0","Ip=diag(rep(1,p))"
"0","V=genV(p=p,r=r,s=s,tele=tele)"
"0","S=V%*%t(V)+diag(rep(1,p))"
"0","# Step I: Generate data "
"0","# method 1: generate data directly with sigma"
"0","data = mvrnorm(n, mu = rep(0,p), Sigma = S)"
"0","# method 2: generate according to factor model"
"0","V=genV(p=p,r=r,s=s,tele=tele)"
"0","f=mvrnorm(n, mu = rep(0,p), Sigma = Ip)"
"0","E=mvrnorm(n, mu = rep(0,p), Sigma = Ip)"
"0","data = V%*%t(f)+sigma*t(E) #mvrnorm(n, mu = rep(0,p), Sigma = S)"
"0","data=t(data)"
"0","# Step II: Calculate Different Covariance Estimator"
"0","# NOTE:  each one has a threshould to tune based on different model"
"0","# TYPE 1: sample covariance"
"0","Shat=cov(data) "
"0","# TYPE 2: (universal) threshoulding sample covariance"
"0","ST=Shat*(abs(Shat)>0.37) "
"0","# note: large sample size n=1e5, thre=0.1, frob_thre=0.2, could find all, better than threshoulding (not not very interesting)"
"0","# TYPE 3: use (3 by 3 block) variance threshoulding"
"0","Snorm=MnormM(Shat,h=2,type=4,RM=F)"
"0","B1=(Snorm>0.38)"
"0","B2=matrix(0,p,p)"
"0","for(i in 1:p){"
"0","  for(j in 1:p){"
"0","    if(abs(i-j)<=10){"
"0","      B1[i,j]=0"
"0","    }"
"0","    if(abs(i-j)<=2){"
"0","      B2[i,j]=1"
"0","    }"
"0","  }"
"0","}"
"0","# SB=Shat*(B1 | B2) # B1: teleconnection; B2: banding, cut nearest-neighbours (too good)"
"0","SB=Shat*(Snorm>0.26)"
"0","# TYPE 4: Tony Cai's Adaptive threshould"
"0","SAT=MnormMvar(data) # Calculate variance of covariance elements"
"0","SA=regAT(Shat,sqrt(SAT),n,const=1.45)"
"0","printM(Shat)"
